/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <../boards/shields/corne/boards/nice_nano.overlay>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define FUNCTION 3

#define THINKPAD BT_SEL 0
#define MACBOOK BT_SEL 1
#define IPHONE BT_SEL 2
#define FREE BT_SEL 3

#define col RGB_COLOR_HSB
#define rr rgb_ug
#define po ext_power

// Overwrite number of leds on the keyboard. A Corne has 27 per side.
&led_strip { 
    chain-length = <27>; 
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  q  |  w  |  e    |  r  |  t  |  |  y  |  u   |  i  |  o  |  p  | BSPC |
// | SHFT |  a  |  s  |  d    |  f  |  g  |  |  h  |  j   |  k  |  l  |  '  |  ;   |
// | LGUI |  z  |  x  |  c    |  v  |  b  |  |  n  |  m   |  ,  |  .  |  /  | ESC  |
//                    | LCTRL | LWR | SPC |  | ENT | RSE  | ALT |
                        bindings = <
    &kp TAB   &kp Q &kp W &kp E     &kp R     &kp T        &kp Y   &kp U     &kp I     &kp O   &kp P    &kp BSPC
    &kp LSHFT &kp A &kp S &kp D     &kp F     &kp G        &kp H   &kp J     &kp K     &kp L   &kp SQT  &kp SEMI
    &kp LGUI  &kp Z &kp X &kp C     &kp V     &kp B        &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp ESC
                          &kp LCTRL &mo LOWER &kp SPACE    &kp RET &mo RAISE &kp RALT
                        >;
                };

//              shift_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |  |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | XXXX |  A  |  S  |  D  |  F  |  G  |  |  H  |  J   |  K  |  L  |  "  |  :   |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |  |  N  |  M   |  <  |  >  |  ?  | ESC  |
//                    | GUI | LWR | SPC |  | ENT | RSE  | ALT |
//                        bindings = <
//    &kp TAB   &kp Q &kp W &kp E    &kp R     &kp T        &kp Y   &kp U     &kp I     &kp O   &kp P    &kp BSPC
//    &kp LSHFT &kp A &kp S &kp D    &kp F     &kp G        &kp H   &kp J     &kp K     &kp L   &kp SQT  &kp SEMI
//    &kp LCTRL &kp Z &kp X &kp C    &kp V     &kp B        &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp ESC
//                          &kp LGUI &mo LOWER &kp SPACE    &kp RET &mo RAISE &kp RALT
//                        >;
//                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1   |  2   |  3    |  4   |  5   |  |  6  |  7  |  8  |  9  |  0  | BSPC |
// | SHFT |      | BRI+ | VOL+  | STOP | PLAY |  |  -  |  =  |  [  |  ]  |  |  |  `   |
// | LGUI |      | BRI- | VOL-  | PREC | NEXT |  |  _  |  +  |  {  |  }  |  \  |  ~   |
//                      | LCTRL | XXX  | SPC  |  | ENT | FUN | ALT |
                        bindings = <
    &kp TAB   &kp N1 &kp N2        &kp N3       &kp N4     &kp N5       &kp N6    &kp N7       &kp N8   &kp N9   &kp N0    &kp BSPC
    &kp LSHFT &trans &kp C_BRI_INC &kp C_VOL_UP &kp C_STOP &kp C_PP     &kp MINUS &kp EQUAL    &kp LBKT &kp RBKT &kp PIPE  &kp GRAVE
    &kp LGUI  &trans &kp C_BRI_DEC &kp C_VOL_DN &kp C_PREV &kp C_NEXT   &kp UNDER &kp PLUS     &kp LBRC &kp RBRC &kp BSLH  &kp TILDE
                                   &kp LCTRL    &trans     &kp SPACE    &kp RET   &mo FUNCTION &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |   #   |  $  |  %  |  |  ^  |  &  |  *  |  (  |  )     | DEL  |
// | SHFT |     |     |       |     |     |  | LFT | DWN |  UP | RGT | PAGEUP | HOME |
// | LGUI |     |     |       |     |     |  |     |     |     |     | PAGEDN | END  |
//                    | LCTRL | FUN | SPC |  | ENT | XXX | ALT |
                        bindings = <
    &kp  TAB  &kp EXCL &kp AT &kp HASH  &kp DLLR     &kp PRCNT    &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp DELETE
    &kp LSHFT &trans   &trans &trans    &trans       &trans       &kp LEFT  &kp DOWN  &kp UP          &kp RIGHT &kp PG_UP &kp HOME
    &kp LGUI  &trans   &trans &trans    &trans       &trans       &trans    &trans    &trans          &trans    &kp PG_DN &kp END
                      	      &kp LCTRL &mo FUNCTION &kp SPACE    &kp RET   &trans    &kp RALT
                        >;
                };

                function_layer {
// ----------------------------------------------------------------------------------------------------------------
// |  F1   |  F2      |  F3     |  F4    |  F5   |  F6   |  |  F7    |  F8    |  F9    |  F10   | F11    | F12    |
// | BTCLR | THINKPAD | MACBOOK | IPHONE | FREE  | USBTt |  | RGBbr+ | RGBsp+ | RGBhu+ | RGBsa+ | RGBef+ | RGBtog |
// | Blue  | White    | Green   | PURPLE | BLACK | GRAY  |  | RGBbr- | RGBsp- | RGBhu- | RGBsa- | RGBef- | EPoff  |
//                              |        | XXXXX |  SPC  |  |  ENT   | XXXXXX |        |
                        bindings = <
    &kp F1               &kp F2            &kp F3              &kp F4               &kp F5           &kp F6          &kp F7      &kp F8      &kp F9      &kp F10     &kp F11     &kp F12
    &bt BT_CLR           &bt THINKPAD      &bt MACBOOK         &bt IPHONE           &bt FREE         &out OUT_TOG    &rr RGB_BRI &rr RGB_SPI &rr RGB_HUI &rr RGB_SAI &rr RGB_EFF &rr RGB_TOG
    &rr col(240,100,100) &rr col(65,0,100) &rr col(65,100,100) &rr col(280,100,100) &rr col(0,100,0) &rr col(0,0,50) &rr RGB_BRD &rr RGB_SPD &rr RGB_HUD &rr RGB_SAD &rr RGB_EFR &po EP_TOG
                    	                                       &trans               &trans           &kp SPACE       &kp RET     &trans      &trans
                        >;
                };
        };
};